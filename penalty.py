# -*- coding: utf-8 -*-
"""Penalty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1io-wvNcvOpQgjGY2cbI_gKxsoVyRjO76
"""

!pip install roboflow
!pip install ultralytics

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="fCmtWxG0yM6xt4n7WtIR")
project = rf.workspace("eilaf").project("colorimg_penalty-exhjv")
version = project.version(6)
dataset = version.download("yolov8")

!ls /content
!ls /content/ColorImg_Penalty-6

from ultralytics import YOLO

model = YOLO("yolov8n.pt")
model.train(data="/content/ColorImg_Penalty-6/data.yaml", epochs=50, imgsz=640)

!ls /content/runs/detect

!ls /content/runs/detect/train5/weights

from google.colab import files
uploaded = files.upload()

import cv2
import os
from ultralytics import YOLO
from glob import glob

# تحميل النموذج
model = YOLO("/content/runs/detect/train5/weights/best.pt")

# مسار الصور
input_folder = "/content/ColorImg_Penalty-6/valid/images"
output_folder = "/content/output_images"
os.makedirs(output_folder, exist_ok=True)

# جلب كل الصور
image_paths = glob(f"{input_folder}/*.jpg")

print(f"📸 عدد الصور: {len(image_paths)}")

for img_path in image_paths:
    img = cv2.imread(img_path)
    results = model(img, conf=0.1)[0]
    boxes = results.boxes
    names = model.names

    for box in boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        cls_id = int(box.cls[0])
        label = f"{names[cls_id]} {box.conf[0]:.2f}"

        color = (0, 255, 0) if names[cls_id] == "ball" else (255, 255, 255)
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
        cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # حفظ الصورة بنتيجتها
    out_name = os.path.join(output_folder, os.path.basename(img_path))
    cv2.imwrite(out_name, img)

print("✅ تم حفظ كل الصور بنتائج الكشف في:", output_folder)

!ls /content/ColorImg_Penalty-6/valid/images

!ls "/content/ColorImg_Penalty-6/valid/images" | grep penalty

from ultralytics import YOLO
from PIL import Image
import cv2
from google.colab.patches import cv2_imshow

model = YOLO("/content/runs/detect/train5/weights/best.pt")

image_path = "/content/ColorImg_Penalty-6/valid/images/penalty_download-7-_jpeg.rf.2d797960bdfbeb22e3526efc99b5a9b8.jpg"

results = model(image_path)[0]
annotated = results.plot()

print("✅ الكائنات المكتشفة:", results.names)
cv2_imshow(annotated)

from google.colab.patches import cv2_imshow
cv2_imshow(cv2.imread("/content/output_images/" + os.listdir("/content/output_images")[0]))

from ultralytics import YOLO
import cv2

# تحميل النموذج
model = YOLO("/content/runs/detect/train5/weights/best.pt")

# تحميل الفيديو
cap = cv2.VideoCapture("/content/penalty1.mp4")

# إعداد كاتب الفيديو للإخراج
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter("/content/output_detected.mp4", fourcc, 30.0, (int(cap.get(3)), int(cap.get(4))))

frame_count = 0

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # تطبيق النموذج على الفريم
    results = model(frame)[0]
    annotated = results.plot()

    # حفظ الفريم الناتج
    out.write(annotated)
    frame_count += 1

cap.release()
out.release()
print(f"✅ تم حفظ الفيديو مع التوقعات في /content/output_detected.mp4، عدد الفريمات: {frame_count}")

from ultralytics import YOLO
import cv2

model = YOLO("/content/runs/detect/train5/weights/best.pt")
cap = cv2.VideoCapture("/content/penalty1.mp4")

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter("/content/output_with_line.mp4", fourcc, 30.0, (int(cap.get(3)), int(cap.get(4))))

# ⚽ إحداثي Y لخط المرمى (اضبطه بناءً على الفيديو)
goal_line_y = 360  # ← غيّره لو احتجت بعد التجربة

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)[0]
    boxes = results.boxes
    names = model.names

    # نرسم خط المرمى
    cv2.line(frame, (0, goal_line_y), (frame.shape[1], goal_line_y), (0, 0, 255), 2)

    for box in boxes:
        cls_id = int(box.cls[0])
        cls_name = names[cls_id]

        if cls_name == "guard":
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            center_y = (y1 + y2) // 2

            # نرسم مربع على الحارس
            cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 255, 255), 2)

            if abs(center_y - goal_line_y) <= 10:
                label = "✅ على الخط"
                color = (0, 255, 0)
            else:
                label = "❌ مو على الخط"
                color = (0, 0, 255)

            cv2.putText(frame, label, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    out.write(frame)

cap.release()
out.release()
print("✅ تم حفظ الفيديو مع خط المرمى والتحقق من وضع الحارس.")

!ls -lh /content/output_with_line.mp4

print("Detected:", [model.names[int(c)] for c in results.boxes.cls])

width = int(cap.get(3))
height = int(cap.get(4))

out = cv2.VideoWriter("/content/output_with_line.mp4", fourcc, 30.0, (width, height))

from google.colab.patches import cv2_imshow
cv2_imshow(cv2.imread("/content/output_images/" + os.listdir("/content/output_images")[0]))

import cv2
import os
from ultralytics import YOLO
from glob import glob

# تحميل النموذج
model = YOLO("/content/runs/detect/train5/weights/best.pt")

# مجلد الصور والدليل الناتج
input_folder = "/content/ColorImg_Penalty-6/valid/images"
output_folder = "/content/output_goalcheck"
os.makedirs(output_folder, exist_ok=True)

# مسار الصور
image_paths = glob(f"{input_folder}/*.jpg")

# ⚽ إحداثي خط المرمى (Y) — عدّله حسب صورك
goal_line_y = 370

for img_path in image_paths:
    img = cv2.imread(img_path)
    results = model(img, conf=0.1)[0]
    boxes = results.boxes
    names = model.names

    # رسم خط المرمى
    cv2.line(img, (0, goal_line_y), (img.shape[1], goal_line_y), (0, 0, 255), 2)

    for box in boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        cls_id = int(box.cls[0])
        cls_name = names[cls_id]

        if cls_name == "guard":
            center_y = (y1 + y2) // 2
            # تحقق من قرب الحارس من الخط
            if abs(center_y - goal_line_y) <= 10:
                label = "✅On the line"
                color = (0, 255, 0)
            else:
                label = "❌Not on the line"
                color = (0, 0, 255)
        else:
            label = f"{cls_name} {box.conf[0]:.2f}"
            color = (255, 255, 255)

        # رسم التوقعات
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
        cv2.putText(img, label, (x1, y1 - 10),
        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
        cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # حفظ الصورة النهائية
    out_path = os.path.join(output_folder, os.path.basename(img_path))
    cv2.imwrite(out_path, img)

print(f"✅ تم حفظ النتائج في: {output_folder}")

from google.colab.patches import cv2_imshow
cv2_imshow(cv2.imread("/content/output_goalcheck/" + os.listdir("/content/output_goalcheck")[0]))