# -*- coding: utf-8 -*-
"""Offside.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjW4TwoUHhWewzyez6QaS4qNCrWadSrn
"""

!pip install roboflow
!pip install ultralytics

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="IRuBYZn8jB6xwEGX972R")
project = rf.workspace("reemaoffside").project("offside-apojc-bcpva")
version = project.version(4)
dataset = version.download("yolov8")

!ls /content

!ls Offside-4
!ls Offside-4/valid

with open("Offside-4/data.yaml", "w") as f:
    f.write("""train: /content/Offside-4/train/images
val: /content/Offside-4/valid/images

nc: 5
names: ["Goalkeeper", "Man C", "Man U", "Referee", "Ball"]
""")

#تدريب
!yolo task=detect mode=train model=yolov8n.pt data=Offside-4/data.yaml epochs=50 imgsz=640

from google.colab import files
uploaded = files.upload()

#اختبار
!yolo task=detect mode=predict model=runs/detect/train/weights/best.pt source="offside3.png" save=True save_txt=True

!ls runs/detect/predict/

import cv2
import matplotlib.pyplot as plt
import os
image_path = "runs/detect/predict/offside3.jpg"
label_path = "runs/detect/predict/labels/offside3.txt"

id_to_class = {
    0: "Goalkeeper",
    1: "Man C",
    2: "Man U",
    3: "Referee",
    4: "Ball"
}

colors = {
    "Goalkeeper": (0, 255, 255),
    "Man C": (255, 255, 0),
    "Man U": (0, 255, 0),
    "Referee": (255, 0, 255),
    "Ball": (255, 255, 255),
    "Offside": (0, 0, 255)
}

img = cv2.imread(image_path)
h, w, _ = img.shape
boxes = []
defender_x = None
msg = "no offside"
# قراءة الإحداثيات
if os.path.exists(label_path):
    with open(label_path, 'r') as f:
        for line in f:
            parts = line.strip().split()
            cls_id = int(parts[0])
            x_center = float(parts[1])
            y_center = float(parts[2])
            bw = float(parts[3])
            bh = float(parts[4])

            x1 = int((x_center - bw/2) * w)
            y1 = int((y_center - bh/2) * h)
            x2 = int((x_center + bw/2) * w)
            y2 = int((y_center + bh/2) * h)
            cls_name = id_to_class.get(cls_id, "Unknown")

            boxes.append({"cls": cls_name, "x": x_center, "x1": x1, "y1": y1, "x2": x2, "y2": y2})

            if cls_name == "Man C":
                if defender_x is None or x_center > defender_x:
                    defender_x = x_center

# رسم البوكسات والتلوين
for box in boxes:
    color = colors.get(box["cls"], (255, 255, 255))

    if box["cls"] == "Man U" and defender_x is not None and box["x"] < defender_x:
        color = colors["Offside"]
        msg = "detect the offside!"

    cv2.rectangle(img, (box["x1"], box["y1"]), (box["x2"], box["y2"]), color, 2)
    cv2.putText(img, box["cls"], (box["x1"], box["y1"] - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)

if defender_x:
    x_def_pixel = int(defender_x * w)
    cv2.line(img, (x_def_pixel, 0), (x_def_pixel, h), (255, 0, 0), 2)

# عرض الصورة + الرسالة
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.figure(figsize=(10, 6))
plt.imshow(img)
plt.axis('off')
plt.title(msg)
plt.show()